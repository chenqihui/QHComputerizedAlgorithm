//
//  TwoThreeSearchTree.m
//  QHComputerizedAlgorithm
//
//  Created by chen on 14-11-27.
//  Copyright (c) 2014年 chen. All rights reserved.
//

#import "TwoThreeSearchTree.h"

//浅谈算法和数据结构（8）：平衡查找树之2-3树---http://blog.jobbole.com/79307/
/*
 本文及后面文章介绍的平衡查找树的数据结构，能够保证在最差的情况下也能达到 lgN 的效率，要实现这一目标我们需要保证树在插入完成之后始终保持平衡状态，这就是平衡查找树(Balanced Search Tree)。
 */
/*
 这里会介绍一些新的数据结构来保证在最坏的情况下插入和查找效率都能保证在对数的时间复杂度内完成。
 本文首先介绍2-3查找树(2-3 Search Tree)，后面会在此基础上介绍红黑树和B树。
 */
/*
 2-3树运行每个节点保存1个或者两个的值。对于普通的2节点(2-node)，它保存1个key和左右两个自己点。对应3节点(3-node)，保存两个Key，2-3查找树的定义如下：
 
 1. 要么为空，要么：
 
 2. 对于2节点，该节点保存一个key及对应value，以及两个指向左右节点的节点，左节点也是一个2-3节点，所有的值都比key要小，有节点也是一个2-3节点，所有的值比key要大。
 
 3. 对于3节点，该节点保存两个key及对应value，以及三个指向左中右的节点。左节点也是一个2-3节点，所有的值均比两个key中的最小的key还要小；中间节点也是一个2-3节点，中间节点的key值在两个跟节点key值之间；右节点也是一个2-3节点，节点的所有key值比两个key中的最大的key还要大。
 */
@implementation TwoThreeSearchTree

/*
 实现
 
 直接实现2-3树比较复杂，因为：
 
 需要处理不同的节点类型，非常繁琐
 需要多次比较操作来将节点下移
 需要上移来拆分4-node节点
 拆分4-node节点的情况有很多种
 2-3查找树实现起来比较复杂，在某些情况插入后的平衡操作可能会使得效率降低。在2-3查找树基础上改进的红黑树不仅具有较高的效率，并且实现起来较2-3查找树简单。
 
 但是2-3查找树作为一种比较重要的概念和思路对于后文要讲到的红黑树和B树非常重要。希望本文对您了解2-3查找树有所帮助。
*/

@end
